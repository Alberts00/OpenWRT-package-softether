diff -urN a/src/Cedar/Admin.c b/src/Cedar/Admin.c
--- a/src/Cedar/Admin.c	2016-03-09 20:14:58.454420012 +0000
+++ b/src/Cedar/Admin.c	2016-03-10 16:55:10.011315650 +0000
@@ -1053,8 +1053,8 @@
 	UINT ret = ERR_NO_ERROR;
 	ZIP_PACKER *p;
 	FIFO *f;
-	BUF *readme_buf;
-	BUF *readme_pdf_buf;
+//	BUF *readme_buf;
+//	BUF *readme_pdf_buf;
 	BUF *sample_buf;
 	OPENVPN_SSTP_CONFIG config;
 	LIST *port_list;
@@ -1081,11 +1081,11 @@
 
 	p = NewZipPacker();
 
-	// readme.txt
-	readme_buf = ReadDump("|openvpn_readme.txt");
-
-	// readme.pdf
-	readme_pdf_buf = ReadDump("|openvpn_readme.pdf");
+//	// readme.txt
+//	readme_buf = ReadDump("|openvpn_readme.txt");
+//
+//	// readme.pdf
+//	readme_pdf_buf = ReadDump("|openvpn_readme.pdf");
 
 	// sample.ovpn
 	sample_buf = ReadDump("|openvpn_sample.ovpn");
@@ -1094,7 +1094,8 @@
 	GetMachineHostName(my_hostname, sizeof(my_hostname));
 	my_hostname[16] = 0;
 
-	if (readme_buf == NULL || sample_buf == NULL || readme_pdf_buf == NULL)
+//	if (readme_buf == NULL || sample_buf == NULL || readme_pdf_buf == NULL)
+	if (sample_buf == NULL)
 	{
 		ret = ERR_INTERNAL_ERROR;
 	}
@@ -1279,8 +1280,8 @@
 			StrLower(my_hostname);
 		}
 
-		ZipAddFileSimple(p, "readme.txt", LocalTime64(), 0, readme_buf->Buf, readme_buf->Size);
-		ZipAddFileSimple(p, "readme.pdf", LocalTime64(), 0, readme_pdf_buf->Buf, readme_pdf_buf->Size);
+//		ZipAddFileSimple(p, "readme.txt", LocalTime64(), 0, readme_buf->Buf, readme_buf->Size);
+//		ZipAddFileSimple(p, "readme.pdf", LocalTime64(), 0, readme_pdf_buf->Buf, readme_pdf_buf->Size);
 
 		ReplaceStrEx((char *)config_l3_buf->Buf, config_l3_buf->Size, (char *)config_l3_buf->Buf,
 			"$TAG_TUN_TAP$", "tun", false);
@@ -1358,9 +1359,9 @@
 			SeekBuf(t->Buffer, 0, 0);
 		}
 
-		FreeBuf(readme_buf);
+//		FreeBuf(readme_buf);
 		FreeBuf(sample_buf);
-		FreeBuf(readme_pdf_buf);
+//		FreeBuf(readme_pdf_buf);
 		FreeBuf(x_buf);
 
 		FreeX(dummy_x);
diff -urN a/src/Cedar/Cedar.c b/src/Cedar/Cedar.c
--- a/src/Cedar/Cedar.c	2016-03-06 13:08:37.000000000 +0000
+++ b/src/Cedar/Cedar.c	2016-03-10 16:55:10.012315650 +0000
@@ -1336,7 +1336,7 @@
 		return;
 	}
 
-	WuFreeWebUI(c->WebUI);
+//	WuFreeWebUI(c->WebUI);
 	FreeCedarLayer3(c);
 
 /*
@@ -1762,7 +1762,7 @@
 
 	InitCedarLayer3(c);
 
-	c->WebUI = WuNewWebUI(c);
+//	c->WebUI = WuNewWebUI(c);
 
 #ifdef	ALPHA_VERSION
 	beta_str = "Alpha";
diff -urN a/src/Cedar/Cedar.h b/src/Cedar/Cedar.h
--- a/src/Cedar/Cedar.h	2016-03-06 13:08:37.000000000 +0000
+++ b/src/Cedar/Cedar.h	2016-03-10 16:55:10.012315650 +0000
@@ -1157,7 +1157,7 @@
 #include <Cedar/Nat.h>
 
 // Web UI
-#include <Cedar/WebUI.h>
+//#include <Cedar/WebUI.h>
 
 // VPN Gate Plugin DLL
 #include <VGate/VGateCommon.h>
diff -urN a/src/Cedar/Protocol.c b/src/Cedar/Protocol.c
--- a/src/Cedar/Protocol.c	2016-03-09 20:27:57.301418921 +0000
+++ b/src/Cedar/Protocol.c	2016-03-10 16:55:10.013315650 +0000
@@ -6291,22 +6291,22 @@
 				{
 					bool b = false;
 
-					// Show the WebUI if the configuration allow to use the WebUI
-					if (c->Cedar->Server != NULL && c->Cedar->Server->UseWebUI)
-					{
-						WU_WEBPAGE *page;
-
-						// Show the WebUI
-						page = WuGetPage(h->Target, c->Cedar->WebUI);
-
-						if (page != NULL)
-						{
-							PostHttp(s, page->header, page->data, page->size);
-							b = true;
-							WuFreeWebPage(page);
-						}
-
-					}
+//					// Show the WebUI if the configuration allow to use the WebUI
+//					if (c->Cedar->Server != NULL && c->Cedar->Server->UseWebUI)
+//					{
+//						WU_WEBPAGE *page;
+//
+//						// Show the WebUI
+//						page = WuGetPage(h->Target, c->Cedar->WebUI);
+//
+//						if (page != NULL)
+//						{
+//							PostHttp(s, page->header, page->data, page->size);
+//							b = true;
+//							WuFreeWebPage(page);
+//						}
+//
+//					}
 
 					if (c->FirstSock->RemoteIP.addr[0] == 127)
 					{
diff -urN a/src/Cedar/Server.c b/src/Cedar/Server.c
--- a/src/Cedar/Server.c	2016-03-09 20:29:20.197418806 +0000
+++ b/src/Cedar/Server.c	2016-03-10 16:55:10.014315650 +0000
@@ -5924,7 +5924,8 @@
 		s->Eraser = NewEraser(s->Logger, CfgGetInt64(f, "AutoDeleteCheckDiskFreeSpaceMin"));
 
 		// WebUI
-		s->UseWebUI = CfgGetBool(f, "UseWebUI");
+//		s->UseWebUI = CfgGetBool(f, "UseWebUI");
+		s->UseWebUI = false;
 
 
 		// WebTimePage
diff -urN a/src/makefiles/linux_32bit.mak b/src/makefiles/linux_32bit.mak
--- a/src/makefiles/linux_32bit.mak	2016-03-06 13:08:37.000000000 +0000
+++ b/src/makefiles/linux_32bit.mak	2016-03-10 16:55:10.015315650 +0000
@@ -48,11 +48,11 @@
 endif
 
 # Files
-HEADERS_MAYAQUA=src/Mayaqua/Cfg.h src/Mayaqua/cryptoki.h src/Mayaqua/Encrypt.h src/Mayaqua/FileIO.h src/Mayaqua/intelaes/iaesni.h src/Mayaqua/Internat.h src/Mayaqua/Kernel.h src/Mayaqua/Mayaqua.h src/Mayaqua/MayaType.h src/Mayaqua/Memory.h src/Mayaqua/Microsoft.h src/Mayaqua/Network.h src/Mayaqua/Object.h src/Mayaqua/OS.h src/Mayaqua/Pack.h src/Mayaqua/pkcs11.h src/Mayaqua/pkcs11f.h src/Mayaqua/pkcs11t.h src/Mayaqua/Secure.h src/Mayaqua/Str.h src/Mayaqua/Table.h src/Mayaqua/TcpIp.h src/Mayaqua/Tick64.h src/Mayaqua/Tracking.h src/Mayaqua/TunTap.h src/Mayaqua/Unix.h src/Mayaqua/Win32.h src/Mayaqua/zlib/zconf.h src/Mayaqua/zlib/zlib.h
-HEADERS_CEDAR=src/Cedar/Account.h src/Cedar/Admin.h src/Cedar/AzureClient.h src/Cedar/AzureServer.h src/Cedar/Bridge.h src/Cedar/BridgeUnix.h src/Cedar/BridgeWin32.h src/Cedar/Cedar.h src/Cedar/CedarPch.h src/Cedar/CedarType.h src/Cedar/Client.h src/Cedar/CM.h src/Cedar/CMInner.h src/Cedar/Command.h src/Cedar/Connection.h src/Cedar/Console.h src/Cedar/Database.h src/Cedar/DDNS.h src/Cedar/EM.h src/Cedar/EMInner.h src/Cedar/EtherLog.h src/Cedar/Hub.h src/Cedar/Interop_OpenVPN.h src/Cedar/Interop_SSTP.h src/Cedar/IPsec.h src/Cedar/IPsec_EtherIP.h src/Cedar/IPsec_IKE.h src/Cedar/IPsec_IkePacket.h src/Cedar/IPsec_IPC.h src/Cedar/IPsec_L2TP.h src/Cedar/IPsec_PPP.h src/Cedar/IPsec_Win7.h src/Cedar/IPsec_Win7Inner.h src/Cedar/Layer3.h src/Cedar/Link.h src/Cedar/Listener.h src/Cedar/Logging.h src/Cedar/Nat.h src/Cedar/NativeStack.h src/Cedar/netcfgn.h src/Cedar/netcfgx.h src/Cedar/NM.h src/Cedar/NMInner.h src/Cedar/NullLan.h src/Cedar/Protocol.h src/Cedar/Radius.h src/Cedar/Remote.h src/Cedar/Sam.h src/Cedar/SecureInfo.h src/Cedar/SecureNAT.h src/Cedar/SeLowUser.h src/Cedar/Server.h src/Cedar/Session.h src/Cedar/SM.h src/Cedar/SMInner.h src/Cedar/SW.h src/Cedar/SWInner.h src/Cedar/UdpAccel.h src/Cedar/UT.h src/Cedar/VG.h src/Cedar/Virtual.h src/Cedar/VLan.h src/Cedar/VLanUnix.h src/Cedar/VLanWin32.h src/Cedar/WaterMark.h src/Cedar/WebUI.h src/Cedar/Win32Com.h src/Cedar/winpcap/bittypes.h src/Cedar/winpcap/bucket_lookup.h src/Cedar/winpcap/count_packets.h src/Cedar/winpcap/Devioctl.h src/Cedar/winpcap/Gnuc.h src/Cedar/winpcap/ip6_misc.h src/Cedar/winpcap/memory_t.h src/Cedar/winpcap/normal_lookup.h src/Cedar/winpcap/Ntddndis.h src/Cedar/winpcap/Ntddpack.h src/Cedar/winpcap/Packet32.h src/Cedar/winpcap/pcap.h src/Cedar/winpcap/pcap-bpf.h src/Cedar/winpcap/pcap-int.h src/Cedar/winpcap/pcap-stdinc.h src/Cedar/winpcap/pthread.h src/Cedar/winpcap/remote-ext.h src/Cedar/winpcap/sched.h src/Cedar/winpcap/semaphore.h src/Cedar/winpcap/tcp_session.h src/Cedar/winpcap/time_calls.h src/Cedar/winpcap/tme.h src/Cedar/winpcap/Win32-Extensions.h src/Cedar/WinUi.h src/Cedar/Wpc.h
-OBJECTS_MAYAQUA=tmp/objs/Mayaqua/Cfg.o tmp/objs/Mayaqua/Encrypt.o tmp/objs/Mayaqua/FileIO.o tmp/objs/Mayaqua/Internat.o tmp/objs/Mayaqua/Kernel.o tmp/objs/Mayaqua/Mayaqua.o tmp/objs/Mayaqua/Memory.o tmp/objs/Mayaqua/Microsoft.o tmp/objs/Mayaqua/Network.o tmp/objs/Mayaqua/Object.o tmp/objs/Mayaqua/OS.o tmp/objs/Mayaqua/Pack.o tmp/objs/Mayaqua/Secure.o tmp/objs/Mayaqua/Str.o tmp/objs/Mayaqua/Table.o tmp/objs/Mayaqua/TcpIp.o tmp/objs/Mayaqua/Tick64.o tmp/objs/Mayaqua/Tracking.o tmp/objs/Mayaqua/Unix.o tmp/objs/Mayaqua/Win32.o
-OBJECTS_CEDAR=tmp/objs/Cedar/Account.o tmp/objs/Cedar/Admin.o tmp/objs/Cedar/AzureClient.o tmp/objs/Cedar/AzureServer.o tmp/objs/Cedar/Bridge.o tmp/objs/Cedar/BridgeUnix.o tmp/objs/Cedar/BridgeWin32.o tmp/objs/Cedar/Cedar.o tmp/objs/Cedar/CedarPch.o tmp/objs/Cedar/Client.o tmp/objs/Cedar/CM.o tmp/objs/Cedar/Command.o tmp/objs/Cedar/Connection.o tmp/objs/Cedar/Console.o tmp/objs/Cedar/Database.o tmp/objs/Cedar/DDNS.o tmp/objs/Cedar/EM.o tmp/objs/Cedar/EtherLog.o tmp/objs/Cedar/Hub.o tmp/objs/Cedar/Interop_OpenVPN.o tmp/objs/Cedar/Interop_SSTP.o tmp/objs/Cedar/IPsec.o tmp/objs/Cedar/IPsec_EtherIP.o tmp/objs/Cedar/IPsec_IKE.o tmp/objs/Cedar/IPsec_IkePacket.o tmp/objs/Cedar/IPsec_IPC.o tmp/objs/Cedar/IPsec_L2TP.o tmp/objs/Cedar/IPsec_PPP.o tmp/objs/Cedar/IPsec_Win7.o tmp/objs/Cedar/Layer3.o tmp/objs/Cedar/Link.o tmp/objs/Cedar/Listener.o tmp/objs/Cedar/Logging.o tmp/objs/Cedar/Nat.o tmp/objs/Cedar/NativeStack.o tmp/objs/Cedar/NM.o tmp/objs/Cedar/NullLan.o tmp/objs/Cedar/Protocol.o tmp/objs/Cedar/Radius.o tmp/objs/Cedar/Remote.o tmp/objs/Cedar/Sam.o tmp/objs/Cedar/SecureInfo.o tmp/objs/Cedar/SecureNAT.o tmp/objs/Cedar/SeLowUser.o tmp/objs/Cedar/Server.o tmp/objs/Cedar/Session.o tmp/objs/Cedar/SM.o tmp/objs/Cedar/SW.o tmp/objs/Cedar/UdpAccel.o tmp/objs/Cedar/UT.o tmp/objs/Cedar/VG.o tmp/objs/Cedar/Virtual.o tmp/objs/Cedar/VLan.o tmp/objs/Cedar/VLanUnix.o tmp/objs/Cedar/VLanWin32.o tmp/objs/Cedar/WaterMark.o tmp/objs/Cedar/WebUI.o tmp/objs/Cedar/WinUi.o tmp/objs/Cedar/Wpc.o
-HAMCORE_FILES=src/bin/hamcore/authors.txt src/bin/hamcore/backup_dir_readme.txt src/bin/hamcore/empty.config src/bin/hamcore/empty_sevpnclient.config src/bin/hamcore/eula.txt src/bin/hamcore/install_src.dat src/bin/hamcore/lang.config src/bin/hamcore/languages.txt src/bin/hamcore/legal.txt src/bin/hamcore/openvpn_readme.pdf src/bin/hamcore/openvpn_readme.txt src/bin/hamcore/openvpn_sample.ovpn src/bin/hamcore/root_certs.dat src/bin/hamcore/SOURCES_OF_BINARY_FILES.TXT src/bin/hamcore/strtable_cn.stb src/bin/hamcore/strtable_en.stb src/bin/hamcore/strtable_ja.stb src/bin/hamcore/vpnweb_sample_cn.htm src/bin/hamcore/vpnweb_sample_en.htm src/bin/hamcore/vpnweb_sample_ja.htm src/bin/hamcore/warning_cn.txt src/bin/hamcore/warning_en.txt src/bin/hamcore/warning_ja.txt src/bin/hamcore/webui/cryptcom.cgi src/bin/hamcore/webui/edituser.cgi src/bin/hamcore/webui/error.cgi src/bin/hamcore/webui/hub.cgi src/bin/hamcore/webui/license.cgi src/bin/hamcore/webui/listener.cgi src/bin/hamcore/webui/localbridge.cgi src/bin/hamcore/webui/login.cgi src/bin/hamcore/webui/newhub.cgi src/bin/hamcore/webui/redirect.cgi src/bin/hamcore/webui/securenat.cgi src/bin/hamcore/webui/server.cgi src/bin/hamcore/webui/session.cgi src/bin/hamcore/webui/user.cgi src/bin/hamcore/webui/webui.css
+HEADERS_MAYAQUA=src/Mayaqua/Cfg.h src/Mayaqua/cryptoki.h src/Mayaqua/Encrypt.h src/Mayaqua/FileIO.h src/Mayaqua/intelaes/iaesni.h src/Mayaqua/Internat.h src/Mayaqua/Kernel.h src/Mayaqua/Mayaqua.h src/Mayaqua/MayaType.h src/Mayaqua/Memory.h  src/Mayaqua/Network.h src/Mayaqua/Object.h src/Mayaqua/OS.h src/Mayaqua/Pack.h src/Mayaqua/pkcs11.h src/Mayaqua/pkcs11f.h src/Mayaqua/pkcs11t.h src/Mayaqua/Secure.h src/Mayaqua/Str.h src/Mayaqua/Table.h src/Mayaqua/TcpIp.h src/Mayaqua/Tick64.h src/Mayaqua/Tracking.h src/Mayaqua/TunTap.h src/Mayaqua/Unix.h src/Mayaqua/zlib/zconf.h src/Mayaqua/zlib/zlib.h
+HEADERS_CEDAR=src/Cedar/Account.h src/Cedar/Admin.h src/Cedar/AzureClient.h src/Cedar/AzureServer.h src/Cedar/Bridge.h src/Cedar/BridgeUnix.h src/Cedar/Cedar.h src/Cedar/CedarPch.h src/Cedar/CedarType.h src/Cedar/Client.h src/Cedar/Command.h src/Cedar/Connection.h src/Cedar/Console.h src/Cedar/Database.h src/Cedar/DDNS.h src/Cedar/EtherLog.h src/Cedar/Hub.h src/Cedar/Interop_OpenVPN.h src/Cedar/Interop_SSTP.h src/Cedar/IPsec.h src/Cedar/IPsec_EtherIP.h src/Cedar/IPsec_IKE.h src/Cedar/IPsec_IkePacket.h src/Cedar/IPsec_IPC.h src/Cedar/IPsec_L2TP.h src/Cedar/IPsec_PPP.h src/Cedar/IPsec_Win7.h src/Cedar/IPsec_Win7Inner.h src/Cedar/Layer3.h src/Cedar/Link.h src/Cedar/Listener.h src/Cedar/Logging.h src/Cedar/Nat.h src/Cedar/NativeStack.h src/Cedar/netcfgn.h src/Cedar/netcfgx.h src/Cedar/NullLan.h src/Cedar/Protocol.h src/Cedar/Radius.h src/Cedar/Remote.h src/Cedar/Sam.h src/Cedar/SecureInfo.h src/Cedar/SecureNAT.h src/Cedar/SeLowUser.h src/Cedar/Server.h src/Cedar/Session.h src/Cedar/UdpAccel.h src/Cedar/VG.h src/Cedar/Virtual.h src/Cedar/VLan.h src/Cedar/VLanUnix.h src/Cedar/WaterMark.h src/Cedar/winpcap/bittypes.h src/Cedar/winpcap/bucket_lookup.h src/Cedar/winpcap/count_packets.h src/Cedar/winpcap/Devioctl.h src/Cedar/winpcap/Gnuc.h src/Cedar/winpcap/ip6_misc.h src/Cedar/winpcap/memory_t.h src/Cedar/winpcap/normal_lookup.h src/Cedar/winpcap/Ntddndis.h src/Cedar/winpcap/Ntddpack.h src/Cedar/winpcap/Packet32.h src/Cedar/winpcap/pcap.h src/Cedar/winpcap/pcap-bpf.h src/Cedar/winpcap/pcap-int.h src/Cedar/winpcap/pcap-stdinc.h src/Cedar/winpcap/pthread.h src/Cedar/winpcap/remote-ext.h src/Cedar/winpcap/sched.h src/Cedar/winpcap/semaphore.h src/Cedar/winpcap/tcp_session.h src/Cedar/winpcap/time_calls.h src/Cedar/winpcap/tme.h src/Cedar/winpcap/Win32-Extensions.h src/Cedar/WinUi.h src/Cedar/Wpc.h
+OBJECTS_MAYAQUA=tmp/objs/Mayaqua/Cfg.o tmp/objs/Mayaqua/Encrypt.o tmp/objs/Mayaqua/FileIO.o tmp/objs/Mayaqua/Internat.o tmp/objs/Mayaqua/Kernel.o tmp/objs/Mayaqua/Mayaqua.o tmp/objs/Mayaqua/Memory.o tmp/objs/Mayaqua/Network.o tmp/objs/Mayaqua/Object.o tmp/objs/Mayaqua/OS.o tmp/objs/Mayaqua/Pack.o tmp/objs/Mayaqua/Secure.o tmp/objs/Mayaqua/Str.o tmp/objs/Mayaqua/Table.o tmp/objs/Mayaqua/TcpIp.o tmp/objs/Mayaqua/Tick64.o tmp/objs/Mayaqua/Tracking.o tmp/objs/Mayaqua/Unix.o
+OBJECTS_CEDAR=tmp/objs/Cedar/Account.o tmp/objs/Cedar/Admin.o tmp/objs/Cedar/AzureClient.o tmp/objs/Cedar/AzureServer.o tmp/objs/Cedar/Bridge.o tmp/objs/Cedar/BridgeUnix.o tmp/objs/Cedar/Cedar.o tmp/objs/Cedar/CedarPch.o tmp/objs/Cedar/Client.o tmp/objs/Cedar/Command.o tmp/objs/Cedar/Connection.o tmp/objs/Cedar/Console.o tmp/objs/Cedar/Database.o tmp/objs/Cedar/DDNS.o tmp/objs/Cedar/EtherLog.o tmp/objs/Cedar/Hub.o tmp/objs/Cedar/Interop_OpenVPN.o tmp/objs/Cedar/Interop_SSTP.o tmp/objs/Cedar/IPsec.o tmp/objs/Cedar/IPsec_EtherIP.o tmp/objs/Cedar/IPsec_IKE.o tmp/objs/Cedar/IPsec_IkePacket.o tmp/objs/Cedar/IPsec_IPC.o tmp/objs/Cedar/IPsec_L2TP.o tmp/objs/Cedar/IPsec_PPP.o tmp/objs/Cedar/IPsec_Win7.o tmp/objs/Cedar/Layer3.o tmp/objs/Cedar/Link.o tmp/objs/Cedar/Listener.o tmp/objs/Cedar/Logging.o tmp/objs/Cedar/Nat.o tmp/objs/Cedar/NativeStack.o tmp/objs/Cedar/NullLan.o tmp/objs/Cedar/Protocol.o tmp/objs/Cedar/Radius.o tmp/objs/Cedar/Remote.o tmp/objs/Cedar/Sam.o tmp/objs/Cedar/SecureInfo.o tmp/objs/Cedar/SecureNAT.o tmp/objs/Cedar/SeLowUser.o tmp/objs/Cedar/Server.o tmp/objs/Cedar/Session.o tmp/objs/Cedar/UdpAccel.o tmp/objs/Cedar/VG.o tmp/objs/Cedar/Virtual.o tmp/objs/Cedar/VLan.o tmp/objs/Cedar/VLanUnix.o tmp/objs/Cedar/WaterMark.o tmp/objs/Cedar/Wpc.o
+HAMCORE_FILES=src/bin/hamcore/empty.config src/bin/hamcore/empty_sevpnclient.config src/bin/hamcore/legal.txt src/bin/hamcore/openvpn_sample.ovpn src/bin/hamcore/root_certs.dat src/bin/hamcore/strtable_en.stb
 
 # Build Action
 default:	build
@@ -91,9 +91,6 @@
 tmp/objs/Mayaqua/Memory.o: src/Mayaqua/Memory.c $(HEADERS_MAYAQUA)
 	$(CC) $(OPTIONS_COMPILE) -c src/Mayaqua/Memory.c -o tmp/objs/Mayaqua/Memory.o
 
-tmp/objs/Mayaqua/Microsoft.o: src/Mayaqua/Microsoft.c $(HEADERS_MAYAQUA)
-	$(CC) $(OPTIONS_COMPILE) -c src/Mayaqua/Microsoft.c -o tmp/objs/Mayaqua/Microsoft.o
-
 tmp/objs/Mayaqua/Network.o: src/Mayaqua/Network.c $(HEADERS_MAYAQUA)
 	$(CC) $(OPTIONS_COMPILE) -c src/Mayaqua/Network.c -o tmp/objs/Mayaqua/Network.o
 
@@ -127,9 +124,6 @@
 tmp/objs/Mayaqua/Unix.o: src/Mayaqua/Unix.c $(HEADERS_MAYAQUA)
 	$(CC) $(OPTIONS_COMPILE) -c src/Mayaqua/Unix.c -o tmp/objs/Mayaqua/Unix.o
 
-tmp/objs/Mayaqua/Win32.o: src/Mayaqua/Win32.c $(HEADERS_MAYAQUA)
-	$(CC) $(OPTIONS_COMPILE) -c src/Mayaqua/Win32.c -o tmp/objs/Mayaqua/Win32.o
-
 # Cedar Communication Module Code
 tmp/objs/Cedar/Account.o: src/Cedar/Account.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/Account.c -o tmp/objs/Cedar/Account.o
@@ -149,9 +143,6 @@
 tmp/objs/Cedar/BridgeUnix.o: src/Cedar/BridgeUnix.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/BridgeUnix.c -o tmp/objs/Cedar/BridgeUnix.o
 
-tmp/objs/Cedar/BridgeWin32.o: src/Cedar/BridgeWin32.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
-	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/BridgeWin32.c -o tmp/objs/Cedar/BridgeWin32.o
-
 tmp/objs/Cedar/Cedar.o: src/Cedar/Cedar.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/Cedar.c -o tmp/objs/Cedar/Cedar.o
 
@@ -161,9 +152,6 @@
 tmp/objs/Cedar/Client.o: src/Cedar/Client.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/Client.c -o tmp/objs/Cedar/Client.o
 
-tmp/objs/Cedar/CM.o: src/Cedar/CM.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
-	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/CM.c -o tmp/objs/Cedar/CM.o
-
 tmp/objs/Cedar/Command.o: src/Cedar/Command.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/Command.c -o tmp/objs/Cedar/Command.o
 
@@ -179,9 +167,6 @@
 tmp/objs/Cedar/DDNS.o: src/Cedar/DDNS.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/DDNS.c -o tmp/objs/Cedar/DDNS.o
 
-tmp/objs/Cedar/EM.o: src/Cedar/EM.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
-	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/EM.c -o tmp/objs/Cedar/EM.o
-
 tmp/objs/Cedar/EtherLog.o: src/Cedar/EtherLog.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/EtherLog.c -o tmp/objs/Cedar/EtherLog.o
 
@@ -236,9 +221,6 @@
 tmp/objs/Cedar/NativeStack.o: src/Cedar/NativeStack.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/NativeStack.c -o tmp/objs/Cedar/NativeStack.o
 
-tmp/objs/Cedar/NM.o: src/Cedar/NM.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
-	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/NM.c -o tmp/objs/Cedar/NM.o
-
 tmp/objs/Cedar/NullLan.o: src/Cedar/NullLan.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/NullLan.c -o tmp/objs/Cedar/NullLan.o
 
@@ -269,18 +251,9 @@
 tmp/objs/Cedar/Session.o: src/Cedar/Session.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/Session.c -o tmp/objs/Cedar/Session.o
 
-tmp/objs/Cedar/SM.o: src/Cedar/SM.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
-	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/SM.c -o tmp/objs/Cedar/SM.o
-
-tmp/objs/Cedar/SW.o: src/Cedar/SW.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
-	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/SW.c -o tmp/objs/Cedar/SW.o
-
 tmp/objs/Cedar/UdpAccel.o: src/Cedar/UdpAccel.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/UdpAccel.c -o tmp/objs/Cedar/UdpAccel.o
 
-tmp/objs/Cedar/UT.o: src/Cedar/UT.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
-	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/UT.c -o tmp/objs/Cedar/UT.o
-
 tmp/objs/Cedar/VG.o: src/Cedar/VG.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/VG.c -o tmp/objs/Cedar/VG.o
 
@@ -293,18 +266,9 @@
 tmp/objs/Cedar/VLanUnix.o: src/Cedar/VLanUnix.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/VLanUnix.c -o tmp/objs/Cedar/VLanUnix.o
 
-tmp/objs/Cedar/VLanWin32.o: src/Cedar/VLanWin32.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
-	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/VLanWin32.c -o tmp/objs/Cedar/VLanWin32.o
-
 tmp/objs/Cedar/WaterMark.o: src/Cedar/WaterMark.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/WaterMark.c -o tmp/objs/Cedar/WaterMark.o
 
-tmp/objs/Cedar/WebUI.o: src/Cedar/WebUI.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
-	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/WebUI.c -o tmp/objs/Cedar/WebUI.o
-
-tmp/objs/Cedar/WinUi.o: src/Cedar/WinUi.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
-	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/WinUi.c -o tmp/objs/Cedar/WinUi.o
-
 tmp/objs/Cedar/Wpc.o: src/Cedar/Wpc.c $(HEADERS_MAYAQUA) $(HEADERS_CEDAR)
 	$(CC) $(OPTIONS_COMPILE) -c src/Cedar/Wpc.c -o tmp/objs/Cedar/Wpc.o
 
diff -urN a/src/Mayaqua/Internat.c b/src/Mayaqua/Internat.c
--- a/src/Mayaqua/Internat.c	2016-03-10 17:37:31.487312084 +0000
+++ b/src/Mayaqua/Internat.c	2016-03-10 17:37:11.542312115 +0000
@@ -925,37 +925,37 @@
 void InitInternational()
 {
 #ifdef	OS_UNIX
-	void *d;
-
-	if (iconv_lock != NULL)
-	{
-		return;
-	}
-
-	GetCurrentCharSet(charset, sizeof(charset));
-	d = IconvWideToStrInternal();
-	if (d == (void *)-1)
-	{
-#ifdef	UNIX_MACOS
-		StrCpy(charset, sizeof(charset), "utf-8");
-#else	// UNIX_MACOS
-//		StrCpy(charset, sizeof(charset), "EUCJP");
-		StrCpy(charset, sizeof(charset), "UTF-8");
-#endif	// UNIX_MACOS
-		d = IconvWideToStrInternal();
-		if (d == (void *)-1)
-		{
-			StrCpy(charset, sizeof(charset), "US");
-		}
-		else
-		{
-			IconvFreeInternal(d);
-		}
-	}
-	else
-	{
-		IconvFreeInternal(d);
-	}
+//	void *d;
+//
+//	if (iconv_lock != NULL)
+//	{
+//		return;
+//	}
+//
+//	GetCurrentCharSet(charset, sizeof(charset));
+//	d = IconvWideToStrInternal();
+//	if (d == (void *)-1)
+//	{
+//#ifdef	UNIX_MACOS
+//		StrCpy(charset, sizeof(charset), "utf-8");
+//#else	// UNIX_MACOS
+////		StrCpy(charset, sizeof(charset), "EUCJP");
+//		StrCpy(charset, sizeof(charset), "UTF-8");
+//#endif	// UNIX_MACOS
+//		d = IconvWideToStrInternal();
+//		if (d == (void *)-1)
+//		{
+//			StrCpy(charset, sizeof(charset), "US");
+//		}
+//		else
+//		{
+//			IconvFreeInternal(d);
+//		}
+//	}
+//	else
+//	{
+//		IconvFreeInternal(d);
+//	}
 
 	iconv_lock = NewLockMain();
 
@@ -1126,12 +1126,12 @@
 	return (void *)iconv_open(IsBigEndian() ? "UTF-16BE" : "UTF-16LE", charset);
 }
 
-// Close the handle
-int IconvFreeInternal(void *d)
-{
-	iconv_close((iconv_t)d);
-	return 0;
-}
+//// Close the handle
+//int IconvFreeInternal(void *d)
+//{
+//	iconv_close((iconv_t)d);
+//	return 0;
+//}
 
 void *IconvWideToStr()
 {
diff -urN a/src/Mayaqua/Internat.h b/src/Mayaqua/Internat.h
--- a/src/Mayaqua/Internat.h	2016-03-06 13:08:36.000000000 +0000
+++ b/src/Mayaqua/Internat.h	2016-03-10 16:57:13.885315473 +0000
@@ -245,7 +245,7 @@
 int IconvFree(void *d);
 void *IconvWideToStrInternal();
 void *IconvStrToWideInternal();
-int IconvFreeInternal(void *d);
+//int IconvFreeInternal(void *d);
 #endif	// OS_UNIX
 
 #endif	// INTERNAT_H
diff -urN a/src/Mayaqua/Mayaqua.h b/src/Mayaqua/Mayaqua.h
--- a/src/Mayaqua/Mayaqua.h	2016-03-06 13:08:36.000000000 +0000
+++ b/src/Mayaqua/Mayaqua.h	2016-03-10 16:55:10.015315650 +0000
@@ -388,7 +388,7 @@
 #include <Mayaqua/OS.h>
 
 // Code for Microsoft Windows
-#include <Mayaqua/Microsoft.h>
+//#include <Mayaqua/Microsoft.h>
 
 
 // Global variables
diff -urN a/src/Mayaqua/Table.c b/src/Mayaqua/Table.c
--- a/src/Mayaqua/Table.c	2016-03-06 13:08:37.000000000 +0000
+++ b/src/Mayaqua/Table.c	2016-03-10 17:42:37.341311656 +0000
@@ -131,10 +131,10 @@
 // Initialization of string table routine
 void InitTable()
 {
-	LIST *o;
-	char tmp[MAX_SIZE];
-	LANGLIST *e = NULL;
-	LANGLIST *os_lang = NULL;
+//	LIST *o;
+//	char tmp[MAX_SIZE];
+//	LANGLIST *e = NULL;
+//	LANGLIST *os_lang = NULL;
 	char table_name[MAX_SIZE];
 	if (MayaquaIsMinimalMode())
 	{
@@ -142,510 +142,513 @@
 		return;
 	}
 
-	o = LoadLangList();
-	if (o == NULL)
+//	o = LoadLangList();
+//	if (o == NULL)
+//	{
+//LABEL_FATAL_ERROR:
+//		Alert("Fatal Error: The file \"hamcore.se2\" is missing or broken.\r\nPlease check hamcore.se2.\r\n\r\n(First, reboot the computer. If this problem occurs again, please reinstall VPN software files.)", NULL);
+//		exit(-1);
+//		return;
+//	}
+//
+//	// Read the lang.config
+//	if (LoadLangConfigCurrentDir(tmp, sizeof(tmp)))
+//	{
+//		e = GetBestLangByName(o, tmp);
+//	}
+//
+//	os_lang = GetBestLangForCurrentEnvironment(o);
+//
+//	if (e == NULL)
+//	{
+//		e = os_lang;
+//	}
+//
+//	if (e == NULL)
+//	{
+//		goto LABEL_FATAL_ERROR;
+//	}
+//
+//	SaveLangConfigCurrentDir(e->Name);
+//
+//	Copy(&current_lang, e, sizeof(LANGLIST));
+//	Copy(&current_os_lang, os_lang, sizeof(LANGLIST));
+//
+//	current_lang.LangList = current_lang.LcidList = NULL;
+//	current_os_lang.LangList = current_os_lang.LcidList = NULL;
+//
+//	// Read the corresponding string table
+//	Format(table_name, sizeof(table_name), "|strtable_%s.stb", current_lang.Name);
+	Format(table_name, sizeof(table_name), "|strtable_en.stb");
+	if (LoadTable(table_name) == false)
 	{
-LABEL_FATAL_ERROR:
 		Alert("Fatal Error: The file \"hamcore.se2\" is missing or broken.\r\nPlease check hamcore.se2.\r\n\r\n(First, reboot the computer. If this problem occurs again, please reinstall VPN software files.)", NULL);
 		exit(-1);
-		return;
-	}
-
-	// Read the lang.config
-	if (LoadLangConfigCurrentDir(tmp, sizeof(tmp)))
-	{
-		e = GetBestLangByName(o, tmp);
-	}
-
-	os_lang = GetBestLangForCurrentEnvironment(o);
-
-	if (e == NULL)
-	{
-		e = os_lang;
-	}
-
-	if (e == NULL)
-	{
-		goto LABEL_FATAL_ERROR;
-	}
-
-	SaveLangConfigCurrentDir(e->Name);
-
-	Copy(&current_lang, e, sizeof(LANGLIST));
-	Copy(&current_os_lang, os_lang, sizeof(LANGLIST));
-
-	current_lang.LangList = current_lang.LcidList = NULL;
-	current_os_lang.LangList = current_os_lang.LcidList = NULL;
-
-	// Read the corresponding string table
-	Format(table_name, sizeof(table_name), "|strtable_%s.stb", current_lang.Name);
-	if (LoadTable(table_name) == false)
-	{
-		goto LABEL_FATAL_ERROR;
-	}
-
-	FreeLangList(o);
-}
-
-// Get the language of the current OS
-void GetCurrentOsLang(LANGLIST *e)
-{
-	// Validate arguments
-	if (e == NULL)
-	{
-		return;
+//		goto LABEL_FATAL_ERROR;
 	}
-
-	Copy(e, &current_os_lang, sizeof(LANGLIST));
-}
-
-// Get the language ID of the current OS
-UINT GetCurrentOsLangId()
-{
-	LANGLIST e;
-
-	Zero(&e, sizeof(e));
-
-	GetCurrentOsLang(&e);
-
-	return e.Id;
-}
-
-// Get the current language
-void GetCurrentLang(LANGLIST *e)
-{
-	// Validate arguments
-	if (e == NULL)
-	{
-		return;
-	}
-
-	Copy(e, &current_lang, sizeof(LANGLIST));
-}
-
-// Get the current language ID
-UINT GetCurrentLangId()
-{
-	LANGLIST e;
-
-	Zero(&e, sizeof(e));
-
-	GetCurrentLang(&e);
-
-	return e.Id;
+//
+//	FreeLangList(o);
 }
 
-// Write to the lang.config file in the current directory
-bool SaveLangConfigCurrentDir(char *str)
-{
-	// Validate arguments
-	if (str == NULL)
-	{
-		return false;
-	}
-
-	return SaveLangConfig(LANG_CONFIG_FILENAME, str);
-}
-
-// Write to the lang.config file
-bool SaveLangConfig(wchar_t *filename, char *str)
-{
-	BUF *b;
-	LIST *o;
-	UINT i;
-	bool ret;
-	// Validate arguments
-	if (filename == NULL)
-	{
-		return false;
-	}
-
-	// Read the template
-	b = ReadDump(LANG_CONFIG_TEMPLETE);
-	if (b == NULL)
-	{
-		return false;
-	}
-
-	SeekBuf(b, b->Size, 0);
-
-	o = LoadLangList();
-	if (o != NULL)
-	{
-		wchar_t tmp[MAX_SIZE];
-
-		AppendBufStr(b, "# Available Language IDs are:\r\n");
-
-		for (i = 0;i < LIST_NUM(o);i++)
-		{
-			LANGLIST *e = LIST_DATA(o, i);
-
-			UniFormat(tmp, sizeof(tmp), L"#  %S: %s (%s)\r\n",
-				e->Name, e->TitleEnglish, e->TitleLocal);
-
-			AppendBufUtf8(b, tmp);
-		}
-
-		AppendBufStr(b, "\r\n\r\n# Specify a Language ID here.\r\n");
-		AppendBufStr(b, str);
-		AppendBufStr(b, "\r\n\r\n");
-
-		FreeLangList(o);
-	}
-
-	ret = DumpBufWIfNecessary(b, filename);
-
-	FreeBuf(b);
-
-	return ret;
-}
-
-// Read the lang.config file in the current directory
-bool LoadLangConfigCurrentDir(char *str, UINT str_size)
-{
-	// Validate arguments
-	if (str == NULL)
-	{
-		return false;
-	}
-
-	return LoadLangConfig(LANG_CONFIG_FILENAME, str, str_size);
-}
-
-// Read the lang.config file
-bool LoadLangConfig(wchar_t *filename, char *str, UINT str_size)
-{
-	BUF *b;
-	bool ret = false;
-	// Validate arguments
-	if (filename == NULL || str == NULL)
-	{
-		return false;
-	}
-
-	b = ReadDumpW(filename);
-	if (b == NULL)
-	{
-		return false;
-	}
-
-	while (true)
-	{
-		char *line = CfgReadNextLine(b);
-
-		if (line == NULL)
-		{
-			break;
-		}
-
-		Trim(line);
-
-		if (IsEmptyStr(line) == false)
-		{
-			if (StartWith(line, "#") == false && StartWith(line, "//") == false && StartWith(line, ";") == false &&
-				InStr(line, "#") == false)
-			{
-				StrCpy(str, str_size, line);
-				ret = true;
-			}
-		}
-
-		Free(line);
-	}
-
-	FreeBuf(b);
-
-	return ret;
-}
-
-// Choose the language from the ID
-LANGLIST *GetLangById(LIST *o, UINT id)
-{
-	UINT i;
-	// Validate arguments
-	if (o == NULL)
-	{
-		return NULL;
-	}
-
-	for (i = 0;i < LIST_NUM(o);i++)
-	{
-		LANGLIST *e = LIST_DATA(o, i);
-
-		if (e->Id == id)
-		{
-			return e;
-		}
-	}
-
-	return NULL;
-}
-
-// Choice the best language for the current environment
-LANGLIST *GetBestLangForCurrentEnvironment(LIST *o)
-{
-	LANGLIST *ret = NULL;
-	// Validate arguments
-	if (o == NULL)
-	{
-		return NULL;
-	}
-
-#ifdef	OS_WIN32
-	ret = GetBestLangByLcid(o, MsGetUserLocaleId());
-#else	// OS_WIN32
-	if (true)
-	{
-		char lang[MAX_SIZE];
-
-		if (GetEnv("LANG", lang, sizeof(lang)))
-		{
-			ret = GetBestLangByLangStr(o, lang);
-		}
-		else
-		{
-			ret = GetBestLangByLangStr(o, "C");
-		}
-	}
-#endif	// OS_WIN32
-
-	return ret;
-}
-
-// Search for the best language from LANG string of UNIX
-LANGLIST *GetBestLangByLangStr(LIST *o, char *str)
-{
-	UINT i;
-	LANGLIST *ret;
-	// Validate arguments
-	if (o == NULL)
-	{
-		return NULL;
-	}
-
-	for (i = 0;i < LIST_NUM(o);i++)
-	{
-		LANGLIST *e = LIST_DATA(o, i);
-		UINT j;
-
-		for (j = 0;j < LIST_NUM(e->LangList);j++)
-		{
-			char *v = LIST_DATA(e->LangList, j);
-
-			if (StrCmpi(v, str) == 0)
-			{
-				return e;
-			}
-		}
-	}
-
-	for (i = 0;i < LIST_NUM(o);i++)
-	{
-		LANGLIST *e = LIST_DATA(o, i);
-		UINT j;
-
-		for (j = 0;j < LIST_NUM(e->LangList);j++)
-		{
-			char *v = LIST_DATA(e->LangList, j);
-
-			if (StartWith(str, v) || StartWith(v, str))
-			{
-				return e;
-			}
-		}
-	}
-
-	ret = GetBestLangByName(o, "en");
-
-	return ret;
-}
-
-// Search for the best language from LCID
-LANGLIST *GetBestLangByLcid(LIST *o, UINT lcid)
-{
-	LANGLIST *ret;
-	UINT i;
-	// Validate arguments
-	if (o == NULL)
-	{
-		return NULL;
-	}
-
-	for (i = 0;i < LIST_NUM(o);i++)
-	{
-		LANGLIST *e = LIST_DATA(o, i);
-
-		if (IsIntInList(e->LcidList, lcid))
-		{
-			return e;
-		}
-	}
-
-	ret = GetBestLangByName(o, "en");
-
-	return ret;
-}
-
-// Search for the best language from the name
-LANGLIST *GetBestLangByName(LIST *o, char *name)
-{
-	UINT i;
-	LANGLIST *ret = NULL;
-	// Validate arguments
-	if (o == NULL)
-	{
-		return NULL;
-	}
-
-	for (i = 0;i < LIST_NUM(o);i++)
-	{
-		LANGLIST *e = LIST_DATA(o, i);
-
-		if (StrCmpi(e->Name, name) == 0)
-		{
-			ret = e;
-			break;
-		}
-	}
-
-	if (ret != NULL)
-	{
-		return ret;
-	}
-
-	for (i = 0;i < LIST_NUM(o);i++)
-	{
-		LANGLIST *e = LIST_DATA(o, i);
-
-		if (StartWith(e->Name, name) || StartWith(name, e->Name))
-		{
-			ret = e;
-			break;
-		}
-	}
-
-	if (ret != NULL)
-	{
-		return ret;
-	}
-
-	return ret;
-}
-
-// Release the language list
-void FreeLangList(LIST *o)
-{
-	UINT i;
-	// Validate arguments
-	if (o == NULL)
-	{
-		return;
-	}
-
-	for (i = 0;i < LIST_NUM(o);i++)
-	{
-		LANGLIST *e = LIST_DATA(o, i);
-
-		FreeStrList(e->LangList);
-		ReleaseIntList(e->LcidList);
-
-		Free(e);
-	}
-
-	ReleaseList(o);
-}
-
-// Read the language list
-LIST *LoadLangList()
-{
-	LIST *o = NewListFast(NULL);
-	char *filename = LANGLIST_FILENAME;
-	BUF *b;
-
-	b = ReadDump(filename);
-	if (b == NULL)
-	{
-		return NULL;
-	}
-
-	while (true)
-	{
-		char *line = CfgReadNextLine(b);
-
-		if (line == NULL)
-		{
-			break;
-		}
-
-		Trim(line);
-
-		if (IsEmptyStr(line) == false && StartWith(line, "#") == false)
-		{
-			TOKEN_LIST *t = ParseToken(line, "\t ");
-			if (t != NULL)
-			{
-				if (t->NumTokens == 6)
-				{
-					LANGLIST *e = ZeroMalloc(sizeof(LANGLIST));
-					TOKEN_LIST *t2;
-
-					e->Id = ToInt(t->Token[0]);
-					StrCpy(e->Name, sizeof(e->Name), t->Token[1]);
-					Utf8ToUni(e->TitleEnglish, sizeof(e->TitleEnglish), t->Token[2], StrLen(t->Token[2]));
-					Utf8ToUni(e->TitleLocal, sizeof(e->TitleLocal), t->Token[3], StrLen(t->Token[3]));
-
-					UniReplaceStrEx(e->TitleEnglish, sizeof(e->TitleEnglish), e->TitleEnglish,
-						L"_", L" ", true);
-
-					UniReplaceStrEx(e->TitleLocal, sizeof(e->TitleLocal), e->TitleLocal,
-						L"_", L" ", true);
-
-					e->LcidList = NewIntList(false);
-
-					t2 = ParseToken(t->Token[4], ",");
-					if (t2 != NULL)
-					{
-						UINT i;
-
-						for (i = 0;i < t2->NumTokens;i++)
-						{
-							UINT id = ToInt(t2->Token[i]);
-
-							AddIntDistinct(e->LcidList, id);
-						}
-
-						FreeToken(t2);
-					}
-
-					e->LangList = NewListFast(NULL);
-
-					t2 = ParseToken(t->Token[5], ",");
-					if (t2 != NULL)
-					{
-						UINT i;
-
-						for (i = 0;i < t2->NumTokens;i++)
-						{
-							Add(e->LangList, CopyStr(t2->Token[i]));
-						}
-
-						FreeToken(t2);
-					}
-
-					Add(o, e);
-				}
-
-				FreeToken(t);
-			}
-		}
-
-		Free(line);
-	}
-
-	FreeBuf(b);
-
-	return o;
-}
+//// Get the language of the current OS
+//void GetCurrentOsLang(LANGLIST *e)
+//{
+//	// Validate arguments
+//	if (e == NULL)
+//	{
+//		return;
+//	}
+//
+//	Copy(e, &current_os_lang, sizeof(LANGLIST));
+//}
+//
+//// Get the language ID of the current OS
+//UINT GetCurrentOsLangId()
+//{
+//	LANGLIST e;
+//
+//	Zero(&e, sizeof(e));
+//
+//	GetCurrentOsLang(&e);
+//
+//	return e.Id;
+//}
+//
+//// Get the current language
+//void GetCurrentLang(LANGLIST *e)
+//{
+//	// Validate arguments
+//	if (e == NULL)
+//	{
+//		return;
+//	}
+//
+//	Copy(e, &current_lang, sizeof(LANGLIST));
+//}
+//
+//// Get the current language ID
+//UINT GetCurrentLangId()
+//{
+//	LANGLIST e;
+//
+//	Zero(&e, sizeof(e));
+//
+//	GetCurrentLang(&e);
+//
+//	return e.Id;
+//}
+//
+//// Write to the lang.config file in the current directory
+//bool SaveLangConfigCurrentDir(char *str)
+//{
+//	// Validate arguments
+//	if (str == NULL)
+//	{
+//		return false;
+//	}
+//
+//	return SaveLangConfig(LANG_CONFIG_FILENAME, str);
+//}
+//
+//// Write to the lang.config file
+//bool SaveLangConfig(wchar_t *filename, char *str)
+//{
+//	BUF *b;
+//	LIST *o;
+//	UINT i;
+//	bool ret;
+//	// Validate arguments
+//	if (filename == NULL)
+//	{
+//		return false;
+//	}
+//
+//	// Read the template
+//	b = ReadDump(LANG_CONFIG_TEMPLETE);
+//	if (b == NULL)
+//	{
+//		return false;
+//	}
+//
+//	SeekBuf(b, b->Size, 0);
+//
+//	o = LoadLangList();
+//	if (o != NULL)
+//	{
+//		wchar_t tmp[MAX_SIZE];
+//
+//		AppendBufStr(b, "# Available Language IDs are:\r\n");
+//
+//		for (i = 0;i < LIST_NUM(o);i++)
+//		{
+//			LANGLIST *e = LIST_DATA(o, i);
+//
+//			UniFormat(tmp, sizeof(tmp), L"#  %S: %s (%s)\r\n",
+//				e->Name, e->TitleEnglish, e->TitleLocal);
+//
+//			AppendBufUtf8(b, tmp);
+//		}
+//
+//		AppendBufStr(b, "\r\n\r\n# Specify a Language ID here.\r\n");
+//		AppendBufStr(b, str);
+//		AppendBufStr(b, "\r\n\r\n");
+//
+//		FreeLangList(o);
+//	}
+//
+//	ret = DumpBufWIfNecessary(b, filename);
+//
+//	FreeBuf(b);
+//
+//	return ret;
+//}
+//
+//// Read the lang.config file in the current directory
+//bool LoadLangConfigCurrentDir(char *str, UINT str_size)
+//{
+//	// Validate arguments
+//	if (str == NULL)
+//	{
+//		return false;
+//	}
+//
+//	return LoadLangConfig(LANG_CONFIG_FILENAME, str, str_size);
+//}
+//
+//// Read the lang.config file
+//bool LoadLangConfig(wchar_t *filename, char *str, UINT str_size)
+//{
+//	BUF *b;
+//	bool ret = false;
+//	// Validate arguments
+//	if (filename == NULL || str == NULL)
+//	{
+//		return false;
+//	}
+//
+//	b = ReadDumpW(filename);
+//	if (b == NULL)
+//	{
+//		return false;
+//	}
+//
+//	while (true)
+//	{
+//		char *line = CfgReadNextLine(b);
+//
+//		if (line == NULL)
+//		{
+//			break;
+//		}
+//
+//		Trim(line);
+//
+//		if (IsEmptyStr(line) == false)
+//		{
+//			if (StartWith(line, "#") == false && StartWith(line, "//") == false && StartWith(line, ";") == false &&
+//				InStr(line, "#") == false)
+//			{
+//				StrCpy(str, str_size, line);
+//				ret = true;
+//			}
+//		}
+//
+//		Free(line);
+//	}
+//
+//	FreeBuf(b);
+//
+//	return ret;
+//}
+//
+//// Choose the language from the ID
+//LANGLIST *GetLangById(LIST *o, UINT id)
+//{
+//	UINT i;
+//	// Validate arguments
+//	if (o == NULL)
+//	{
+//		return NULL;
+//	}
+//
+//	for (i = 0;i < LIST_NUM(o);i++)
+//	{
+//		LANGLIST *e = LIST_DATA(o, i);
+//
+//		if (e->Id == id)
+//		{
+//			return e;
+//		}
+//	}
+//
+//	return NULL;
+//}
+//
+//// Choice the best language for the current environment
+//LANGLIST *GetBestLangForCurrentEnvironment(LIST *o)
+//{
+//	LANGLIST *ret = NULL;
+//	// Validate arguments
+//	if (o == NULL)
+//	{
+//		return NULL;
+//	}
+//
+//#ifdef	OS_WIN32
+//	ret = GetBestLangByLcid(o, MsGetUserLocaleId());
+//#else	// OS_WIN32
+//	if (true)
+//	{
+//		char lang[MAX_SIZE];
+//
+//		if (GetEnv("LANG", lang, sizeof(lang)))
+//		{
+//			ret = GetBestLangByLangStr(o, lang);
+//		}
+//		else
+//		{
+//			ret = GetBestLangByLangStr(o, "C");
+//		}
+//	}
+//#endif	// OS_WIN32
+//
+//	return ret;
+//}
+//
+//// Search for the best language from LANG string of UNIX
+//LANGLIST *GetBestLangByLangStr(LIST *o, char *str)
+//{
+//	UINT i;
+//	LANGLIST *ret;
+//	// Validate arguments
+//	if (o == NULL)
+//	{
+//		return NULL;
+//	}
+//
+//	for (i = 0;i < LIST_NUM(o);i++)
+//	{
+//		LANGLIST *e = LIST_DATA(o, i);
+//		UINT j;
+//
+//		for (j = 0;j < LIST_NUM(e->LangList);j++)
+//		{
+//			char *v = LIST_DATA(e->LangList, j);
+//
+//			if (StrCmpi(v, str) == 0)
+//			{
+//				return e;
+//			}
+//		}
+//	}
+//
+//	for (i = 0;i < LIST_NUM(o);i++)
+//	{
+//		LANGLIST *e = LIST_DATA(o, i);
+//		UINT j;
+//
+//		for (j = 0;j < LIST_NUM(e->LangList);j++)
+//		{
+//			char *v = LIST_DATA(e->LangList, j);
+//
+//			if (StartWith(str, v) || StartWith(v, str))
+//			{
+//				return e;
+//			}
+//		}
+//	}
+//
+//	ret = GetBestLangByName(o, "en");
+//
+//	return ret;
+//}
+//
+//// Search for the best language from LCID
+//LANGLIST *GetBestLangByLcid(LIST *o, UINT lcid)
+//{
+//	LANGLIST *ret;
+//	UINT i;
+//	// Validate arguments
+//	if (o == NULL)
+//	{
+//		return NULL;
+//	}
+//
+//	for (i = 0;i < LIST_NUM(o);i++)
+//	{
+//		LANGLIST *e = LIST_DATA(o, i);
+//
+//		if (IsIntInList(e->LcidList, lcid))
+//		{
+//			return e;
+//		}
+//	}
+//
+//	ret = GetBestLangByName(o, "en");
+//
+//	return ret;
+//}
+//
+//// Search for the best language from the name
+//LANGLIST *GetBestLangByName(LIST *o, char *name)
+//{
+//	UINT i;
+//	LANGLIST *ret = NULL;
+//	// Validate arguments
+//	if (o == NULL)
+//	{
+//		return NULL;
+//	}
+//
+//	for (i = 0;i < LIST_NUM(o);i++)
+//	{
+//		LANGLIST *e = LIST_DATA(o, i);
+//
+//		if (StrCmpi(e->Name, name) == 0)
+//		{
+//			ret = e;
+//			break;
+//		}
+//	}
+//
+//	if (ret != NULL)
+//	{
+//		return ret;
+//	}
+//
+//	for (i = 0;i < LIST_NUM(o);i++)
+//	{
+//		LANGLIST *e = LIST_DATA(o, i);
+//
+//		if (StartWith(e->Name, name) || StartWith(name, e->Name))
+//		{
+//			ret = e;
+//			break;
+//		}
+//	}
+//
+//	if (ret != NULL)
+//	{
+//		return ret;
+//	}
+//
+//	return ret;
+//}
+//
+//// Release the language list
+//void FreeLangList(LIST *o)
+//{
+//	UINT i;
+//	// Validate arguments
+//	if (o == NULL)
+//	{
+//		return;
+//	}
+//
+//	for (i = 0;i < LIST_NUM(o);i++)
+//	{
+//		LANGLIST *e = LIST_DATA(o, i);
+//
+//		FreeStrList(e->LangList);
+//		ReleaseIntList(e->LcidList);
+//
+//		Free(e);
+//	}
+//
+//	ReleaseList(o);
+//}
+//
+//// Read the language list
+//LIST *LoadLangList()
+//{
+//	LIST *o = NewListFast(NULL);
+//	char *filename = LANGLIST_FILENAME;
+//	BUF *b;
+//
+//	b = ReadDump(filename);
+//	if (b == NULL)
+//	{
+//		return NULL;
+//	}
+//
+//	while (true)
+//	{
+//		char *line = CfgReadNextLine(b);
+//
+//		if (line == NULL)
+//		{
+//			break;
+//		}
+//
+//		Trim(line);
+//
+//		if (IsEmptyStr(line) == false && StartWith(line, "#") == false)
+//		{
+//			TOKEN_LIST *t = ParseToken(line, "\t ");
+//			if (t != NULL)
+//			{
+//				if (t->NumTokens == 6)
+//				{
+//					LANGLIST *e = ZeroMalloc(sizeof(LANGLIST));
+//					TOKEN_LIST *t2;
+//
+//					e->Id = ToInt(t->Token[0]);
+//					StrCpy(e->Name, sizeof(e->Name), t->Token[1]);
+//					Utf8ToUni(e->TitleEnglish, sizeof(e->TitleEnglish), t->Token[2], StrLen(t->Token[2]));
+//					Utf8ToUni(e->TitleLocal, sizeof(e->TitleLocal), t->Token[3], StrLen(t->Token[3]));
+//
+//					UniReplaceStrEx(e->TitleEnglish, sizeof(e->TitleEnglish), e->TitleEnglish,
+//						L"_", L" ", true);
+//
+//					UniReplaceStrEx(e->TitleLocal, sizeof(e->TitleLocal), e->TitleLocal,
+//						L"_", L" ", true);
+//
+//					e->LcidList = NewIntList(false);
+//
+//					t2 = ParseToken(t->Token[4], ",");
+//					if (t2 != NULL)
+//					{
+//						UINT i;
+//
+//						for (i = 0;i < t2->NumTokens;i++)
+//						{
+//							UINT id = ToInt(t2->Token[i]);
+//
+//							AddIntDistinct(e->LcidList, id);
+//						}
+//
+//						FreeToken(t2);
+//					}
+//
+//					e->LangList = NewListFast(NULL);
+//
+//					t2 = ParseToken(t->Token[5], ",");
+//					if (t2 != NULL)
+//					{
+//						UINT i;
+//
+//						for (i = 0;i < t2->NumTokens;i++)
+//						{
+//							Add(e->LangList, CopyStr(t2->Token[i]));
+//						}
+//
+//						FreeToken(t2);
+//					}
+//
+//					Add(o, e);
+//				}
+//
+//				FreeToken(t);
+//			}
+//		}
+//
+//		Free(line);
+//	}
+//
+//	FreeBuf(b);
+//
+//	return o;
+//}
 
 // Get an error string in Unicode
 wchar_t *GetUniErrorStr(UINT err)
@@ -1177,204 +1180,204 @@
 	return true;
 }
 
-// Generate the Unicode string cache file name
-void GenerateUnicodeCacheFileName(wchar_t *name, UINT size, wchar_t *strfilename, UINT strfilesize, UCHAR *filehash)
-{
-	wchar_t tmp[MAX_SIZE];
-	wchar_t hashstr[64];
-	wchar_t hashtemp[MAX_SIZE];
-	wchar_t exe[MAX_SIZE];
-	UCHAR hash[SHA1_SIZE];
-	// Validate arguments
-	if (name == NULL || strfilename == NULL || filehash == NULL)
-	{
-		return;
-	}
-
-	GetExeDirW(exe, sizeof(exe));
-	UniStrCpy(hashtemp, sizeof(hashtemp), strfilename);
-	BinToStrW(tmp, sizeof(tmp), filehash, MD5_SIZE);
-	UniStrCat(hashtemp, sizeof(hashtemp), tmp);
-	UniStrCat(hashtemp, sizeof(hashtemp), exe);
-	UniStrLower(hashtemp);
-
-	Hash(hash, hashtemp, UniStrLen(hashtemp) * sizeof(wchar_t), true);
-	BinToStrW(hashstr, sizeof(hashstr), hash, 4);
-	UniFormat(tmp, sizeof(tmp), UNICODE_CACHE_FILE, hashstr);
-	UniStrLower(tmp);
-
-#ifndef	OS_WIN32
-	UniStrCpy(exe, sizeof(exe), L"/tmp");
-#else	// OS_WIN32
-	StrToUni(exe, sizeof(exe), MsGetTempDir());
-#endif	// OS_WIN32
-
-	UniFormat(name, size, L"%s/%s", exe, tmp);
-	NormalizePathW(name, size, name);
-}
-
-// Save the Unicode cache
-void SaveUnicodeCache(wchar_t *strfilename, UINT strfilesize, UCHAR *hash)
-{
-	UNICODE_CACHE c;
-	BUF *b;
-	UINT i;
-	IO *io;
-	wchar_t name[MAX_PATH];
-	UCHAR binhash[MD5_SIZE];
-	// Validate arguments
-	if (strfilename == NULL || hash == NULL)
-	{
-		return;
-	}
-
-	Zero(&c, sizeof(c));
-	UniToStr(c.StrFileName, sizeof(c.StrFileName), strfilename);
-	c.StrFileSize = strfilesize;
-	GetMachineName(c.MachineName, sizeof(c.MachineName));
-	c.OsType = GetOsInfo()->OsType;
-	Copy(c.hash, hash, MD5_SIZE);
-
-#ifdef	OS_UNIX
-	GetCurrentCharSet(c.CharSet, sizeof(c.CharSet));
-#else	// OS_UNIX
-	{
-		UINT id = MsGetThreadLocale();
-		Copy(c.CharSet, &id, sizeof(id));
-	}
-#endif	// OS_UNIX
-
-	b = NewBuf();
-	WriteBuf(b, &c, sizeof(c));
-
-	WriteBufInt(b, LIST_NUM(TableList));
-	for (i = 0;i < LIST_NUM(TableList);i++)
-	{
-		TABLE *t = LIST_DATA(TableList, i);
-		WriteBufInt(b, StrLen(t->name));
-		WriteBuf(b, t->name, StrLen(t->name));
-		WriteBufInt(b, StrLen(t->str));
-		WriteBuf(b, t->str, StrLen(t->str));
-		WriteBufInt(b, UniStrLen(t->unistr));
-		WriteBuf(b, t->unistr, UniStrLen(t->unistr) * sizeof(wchar_t));
-	}
-
-	Hash(binhash, b->Buf, b->Size, false);
-	WriteBuf(b, binhash, MD5_SIZE);
-
-	GenerateUnicodeCacheFileName(name, sizeof(name), strfilename, strfilesize, hash);
-
-	io = FileCreateW(name);
-	if (io != NULL)
-	{
-		SeekBuf(b, 0, 0);
-		BufToFile(io, b);
-		FileClose(io);
-	}
-
-	FreeBuf(b);
-}
-
-// Reading the Unicode cache
-bool LoadUnicodeCache(wchar_t *strfilename, UINT strfilesize, UCHAR *hash)
-{
-	UNICODE_CACHE c, t;
-	BUF *b;
-	UINT i, num;
-	IO *io;
-	wchar_t name[MAX_PATH];
-	UCHAR binhash[MD5_SIZE];
-	UCHAR binhash_2[MD5_SIZE];
-	// Validate arguments
-	if (strfilename == NULL || hash == NULL)
-	{
-		return false;
-	}
-
-	GenerateUnicodeCacheFileName(name, sizeof(name), strfilename, strfilesize, hash);
-
-	io = FileOpenW(name, false);
-	if (io == NULL)
-	{
-		return false;
-	}
-
-	b = FileToBuf(io);
-	if (b == NULL)
-	{
-		FileClose(io);
-		return false;
-	}
-
-	SeekBuf(b, 0, 0);
-	FileClose(io);
-
-	Hash(binhash, b->Buf, b->Size >= MD5_SIZE ? (b->Size - MD5_SIZE) : 0, false);
-	Copy(binhash_2, ((UCHAR *)b->Buf) + (b->Size >= MD5_SIZE ? (b->Size - MD5_SIZE) : 0), MD5_SIZE);
-	if (Cmp(binhash, binhash_2, MD5_SIZE) != 0)
-	{
-		FreeBuf(b);
-		return false;
-	}
-
-	Zero(&c, sizeof(c));
-	UniToStr(c.StrFileName, sizeof(c.StrFileName), strfilename);
-	c.StrFileSize = strfilesize;
-	DisableNetworkNameCache();
-	GetMachineName(c.MachineName, sizeof(c.MachineName));
-	EnableNetworkNameCache();
-	c.OsType = GetOsInfo()->OsType;
-	Copy(c.hash, hash, MD5_SIZE);
-
-#ifdef	OS_UNIX
-	GetCurrentCharSet(c.CharSet, sizeof(c.CharSet));
-#else	// OS_UNIX
-	{
-		UINT id = MsGetThreadLocale();
-		Copy(c.CharSet, &id, sizeof(id));
-	}
-#endif	// OS_UNIX
-
-	Zero(&t, sizeof(t));
-	ReadBuf(b, &t, sizeof(t));
-
-	if (Cmp(&c, &t, sizeof(UNICODE_CACHE)) != 0)
-	{
-		FreeBuf(b);
-		return false;
-	}
-
-	num = ReadBufInt(b);
-
-	FreeTable();
-	TableList = NewList(CmpTableName);
-
-	for (i = 0;i < num;i++)
-	{
-		UINT len;
-		TABLE *t = ZeroMalloc(sizeof(TABLE));
-
-		len = ReadBufInt(b);
-		t->name = ZeroMalloc(len + 1);
-		ReadBuf(b, t->name, len);
-
-		len = ReadBufInt(b);
-		t->str = ZeroMalloc(len + 1);
-		ReadBuf(b, t->str, len);
-
-		len = ReadBufInt(b);
-		t->unistr = ZeroMalloc((len + 1) * sizeof(wchar_t));
-		ReadBuf(b, t->unistr, len * sizeof(wchar_t));
-
-		Add(TableList, t);
-	}
-
-	FreeBuf(b);
-
-	Sort(TableList);
-
-	return true;
-}
+//// Generate the Unicode string cache file name
+//void GenerateUnicodeCacheFileName(wchar_t *name, UINT size, wchar_t *strfilename, UINT strfilesize, UCHAR *filehash)
+//{
+//	wchar_t tmp[MAX_SIZE];
+//	wchar_t hashstr[64];
+//	wchar_t hashtemp[MAX_SIZE];
+//	wchar_t exe[MAX_SIZE];
+//	UCHAR hash[SHA1_SIZE];
+//	// Validate arguments
+//	if (name == NULL || strfilename == NULL || filehash == NULL)
+//	{
+//		return;
+//	}
+//
+//	GetExeDirW(exe, sizeof(exe));
+//	UniStrCpy(hashtemp, sizeof(hashtemp), strfilename);
+//	BinToStrW(tmp, sizeof(tmp), filehash, MD5_SIZE);
+//	UniStrCat(hashtemp, sizeof(hashtemp), tmp);
+//	UniStrCat(hashtemp, sizeof(hashtemp), exe);
+//	UniStrLower(hashtemp);
+//
+//	Hash(hash, hashtemp, UniStrLen(hashtemp) * sizeof(wchar_t), true);
+//	BinToStrW(hashstr, sizeof(hashstr), hash, 4);
+//	UniFormat(tmp, sizeof(tmp), UNICODE_CACHE_FILE, hashstr);
+//	UniStrLower(tmp);
+//
+//#ifndef	OS_WIN32
+//	UniStrCpy(exe, sizeof(exe), L"/tmp");
+//#else	// OS_WIN32
+//	StrToUni(exe, sizeof(exe), MsGetTempDir());
+//#endif	// OS_WIN32
+//
+//	UniFormat(name, size, L"%s/%s", exe, tmp);
+//	NormalizePathW(name, size, name);
+//}
+//
+//// Save the Unicode cache
+//void SaveUnicodeCache(wchar_t *strfilename, UINT strfilesize, UCHAR *hash)
+//{
+//	UNICODE_CACHE c;
+//	BUF *b;
+//	UINT i;
+//	IO *io;
+//	wchar_t name[MAX_PATH];
+//	UCHAR binhash[MD5_SIZE];
+//	// Validate arguments
+//	if (strfilename == NULL || hash == NULL)
+//	{
+//		return;
+//	}
+//
+//	Zero(&c, sizeof(c));
+//	UniToStr(c.StrFileName, sizeof(c.StrFileName), strfilename);
+//	c.StrFileSize = strfilesize;
+//	GetMachineName(c.MachineName, sizeof(c.MachineName));
+//	c.OsType = GetOsInfo()->OsType;
+//	Copy(c.hash, hash, MD5_SIZE);
+//
+//#ifdef	OS_UNIX
+//	GetCurrentCharSet(c.CharSet, sizeof(c.CharSet));
+//#else	// OS_UNIX
+//	{
+//		UINT id = MsGetThreadLocale();
+//		Copy(c.CharSet, &id, sizeof(id));
+//	}
+//#endif	// OS_UNIX
+//
+//	b = NewBuf();
+//	WriteBuf(b, &c, sizeof(c));
+//
+//	WriteBufInt(b, LIST_NUM(TableList));
+//	for (i = 0;i < LIST_NUM(TableList);i++)
+//	{
+//		TABLE *t = LIST_DATA(TableList, i);
+//		WriteBufInt(b, StrLen(t->name));
+//		WriteBuf(b, t->name, StrLen(t->name));
+//		WriteBufInt(b, StrLen(t->str));
+//		WriteBuf(b, t->str, StrLen(t->str));
+//		WriteBufInt(b, UniStrLen(t->unistr));
+//		WriteBuf(b, t->unistr, UniStrLen(t->unistr) * sizeof(wchar_t));
+//	}
+//
+//	Hash(binhash, b->Buf, b->Size, false);
+//	WriteBuf(b, binhash, MD5_SIZE);
+//
+//	GenerateUnicodeCacheFileName(name, sizeof(name), strfilename, strfilesize, hash);
+//
+//	io = FileCreateW(name);
+//	if (io != NULL)
+//	{
+//		SeekBuf(b, 0, 0);
+//		BufToFile(io, b);
+//		FileClose(io);
+//	}
+//
+//	FreeBuf(b);
+//}
+//
+//// Reading the Unicode cache
+//bool LoadUnicodeCache(wchar_t *strfilename, UINT strfilesize, UCHAR *hash)
+//{
+//	UNICODE_CACHE c, t;
+//	BUF *b;
+//	UINT i, num;
+//	IO *io;
+//	wchar_t name[MAX_PATH];
+//	UCHAR binhash[MD5_SIZE];
+//	UCHAR binhash_2[MD5_SIZE];
+//	// Validate arguments
+//	if (strfilename == NULL || hash == NULL)
+//	{
+//		return false;
+//	}
+//
+//	GenerateUnicodeCacheFileName(name, sizeof(name), strfilename, strfilesize, hash);
+//
+//	io = FileOpenW(name, false);
+//	if (io == NULL)
+//	{
+//		return false;
+//	}
+//
+//	b = FileToBuf(io);
+//	if (b == NULL)
+//	{
+//		FileClose(io);
+//		return false;
+//	}
+//
+//	SeekBuf(b, 0, 0);
+//	FileClose(io);
+//
+//	Hash(binhash, b->Buf, b->Size >= MD5_SIZE ? (b->Size - MD5_SIZE) : 0, false);
+//	Copy(binhash_2, ((UCHAR *)b->Buf) + (b->Size >= MD5_SIZE ? (b->Size - MD5_SIZE) : 0), MD5_SIZE);
+//	if (Cmp(binhash, binhash_2, MD5_SIZE) != 0)
+//	{
+//		FreeBuf(b);
+//		return false;
+//	}
+//
+//	Zero(&c, sizeof(c));
+//	UniToStr(c.StrFileName, sizeof(c.StrFileName), strfilename);
+//	c.StrFileSize = strfilesize;
+//	DisableNetworkNameCache();
+//	GetMachineName(c.MachineName, sizeof(c.MachineName));
+//	EnableNetworkNameCache();
+//	c.OsType = GetOsInfo()->OsType;
+//	Copy(c.hash, hash, MD5_SIZE);
+//
+//#ifdef	OS_UNIX
+//	GetCurrentCharSet(c.CharSet, sizeof(c.CharSet));
+//#else	// OS_UNIX
+//	{
+//		UINT id = MsGetThreadLocale();
+//		Copy(c.CharSet, &id, sizeof(id));
+//	}
+//#endif	// OS_UNIX
+//
+//	Zero(&t, sizeof(t));
+//	ReadBuf(b, &t, sizeof(t));
+//
+//	if (Cmp(&c, &t, sizeof(UNICODE_CACHE)) != 0)
+//	{
+//		FreeBuf(b);
+//		return false;
+//	}
+//
+//	num = ReadBufInt(b);
+//
+//	FreeTable();
+//	TableList = NewList(CmpTableName);
+//
+//	for (i = 0;i < num;i++)
+//	{
+//		UINT len;
+//		TABLE *t = ZeroMalloc(sizeof(TABLE));
+//
+//		len = ReadBufInt(b);
+//		t->name = ZeroMalloc(len + 1);
+//		ReadBuf(b, t->name, len);
+//
+//		len = ReadBufInt(b);
+//		t->str = ZeroMalloc(len + 1);
+//		ReadBuf(b, t->str, len);
+//
+//		len = ReadBufInt(b);
+//		t->unistr = ZeroMalloc((len + 1) * sizeof(wchar_t));
+//		ReadBuf(b, t->unistr, len * sizeof(wchar_t));
+//
+//		Add(TableList, t);
+//	}
+//
+//	FreeBuf(b);
+//
+//	Sort(TableList);
+//
+//	return true;
+//}
 
 // Read the string table
 bool LoadTableMain(wchar_t *filename)
@@ -1414,22 +1417,22 @@
 
 	Hash(hash, b->Buf, b->Size, false);
 
-	if (LoadUnicodeCache(filename, b->Size, hash) == false)
-	{
+//	if (LoadUnicodeCache(filename, b->Size, hash) == false)
+//	{
 		if (LoadTableFromBuf(b) == false)
 		{
 			FreeBuf(b);
 			return false;
 		}
 
-		SaveUnicodeCache(filename, b->Size, hash);
-
-		//Debug("Unicode Source: strtable.stb\n");
-	}
-	else
-	{
-		//Debug("Unicode Source: unicode_cache\n");
-	}
+//		SaveUnicodeCache(filename, b->Size, hash);
+//
+//		//Debug("Unicode Source: strtable.stb\n");
+//	}
+//	else
+//	{
+//		//Debug("Unicode Source: unicode_cache\n");
+//	}
 
 	FreeBuf(b);
 
diff -urN a/src/Mayaqua/Table.h b/src/Mayaqua/Table.h
--- a/src/Mayaqua/Table.h	2016-03-06 13:08:37.000000000 +0000
+++ b/src/Mayaqua/Table.h	2016-03-10 16:56:08.073315569 +0000
@@ -181,9 +181,9 @@
 char *GetErrorStr(UINT err);
 wchar_t *GetUniErrorStr(UINT err);
 UINT GetTableInt(char *name);
-void GenerateUnicodeCacheFileName(wchar_t *name, UINT size, wchar_t *strfilename, UINT strfilesize, UCHAR *filehash);
-void SaveUnicodeCache(wchar_t *strfilename, UINT strfilesize, UCHAR *hash);
-bool LoadUnicodeCache(wchar_t *strfilename, UINT strfilesize, UCHAR *hash);
+//void GenerateUnicodeCacheFileName(wchar_t *name, UINT size, wchar_t *strfilename, UINT strfilesize, UCHAR *filehash);
+//void SaveUnicodeCache(wchar_t *strfilename, UINT strfilesize, UCHAR *hash);
+//bool LoadUnicodeCache(wchar_t *strfilename, UINT strfilesize, UCHAR *hash);
 void InitTable();
 
 LIST *LoadLangList();
